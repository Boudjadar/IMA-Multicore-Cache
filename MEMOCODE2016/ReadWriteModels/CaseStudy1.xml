<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.

const	  int MAXTIME = 80000;
typedef	  int[0,MAXTIME] time_t;      // declaration of type time

const      int DRAMAccessTime=2;      // the time for reading from the memory once it is reached

const      int slot=10;                // the cyclic time interval (TDMA) assigned to each core to access DRAM
const      int MemoryBufferSize=8;
const	  int MAXPRI = 20;           // declaration of type priority
typedef   int[0,MAXPRI] pri_t;

const	  int tId_n = 4;                     // the number of tasks
typedef	  int[0,tId_n-1] tId_t;

const	  int cId_n = 2;                     // the number of cores
typedef	  int[0,cId_n-1] cId_t;

const    int cluster_n= 2;                 // Max Tasks Per Core
typedef  int [0,cluster_n-1] cluster_t;

const	  int actId_n = 13;                     // Max number of access requests per task
typedef	  int[0,actId_n-1] actId_t;

bool DRAMreq[cId_n]={false, false};                         // a queue to store the DRAM acess requests of cores 

typedef   int[0,2] MemAccess;
typedef   int[0,2] RW;

const     MemAccess cache = 1;   // only cache access required, hit
const     MemAccess dram = 2;    // DRAM access required because the cache access will fail
const     RW Read=1;
const     RW Write=2;

typedef struct { 
  time_t	 issueTime;        // exectime, number of ticks, of an atomic basic instruction
  MemAccess  memoryAccess;  //cache/DRAM requirement and access mode
  RW         rwAction;    // the nature of access operation: read or write
} accessRequest;               // atomic instruction (statement)

typedef accessRequest Requests[actId_n];// a table of max ( static actid_t) instruction
accessRequest coreAccess[cId_n]; //variable to store the current access request of each core

typedef struct {
  int   length;
  tId_t   elt[cluster_n];
} queue_t;                         // queue to store the ready tasks of each core locally

const queue_t queue1={0,{0,0}};   // declaration of the core1's queue which is initially empty
const queue_t queue2={0,{0,0}};   // declaration of the core2's queue which is initially empty
//const queue_t queue3={0,{0,0,0}};   // declaration of the core2's queue which is initially empty


/* Scheduling policies */
typedef  int[1,4] sched;
const	 sched  FIFO  = 1;
const	 sched  FPS   = 2;
const    sched  EDF   = 3;
const    sched  MCentric = 4;

typedef struct{
  time_t     LocalCacheTime; // cache access time
  queue_t    queue;     // local queue to store the ready tasks assigned to the core
  sched      scheduler; // the ID of the schedler adopted by the core
} core_t;


core_t core[cId_n]= {
{1, queue1, FIFO},  //MCentric
{1, queue2, FIFO}   //MCentric
};  // table of cores

int ready[cId_n]={0,0};
typedef struct {
cId_t core;
accessRequest req;
} BufferElt;

typedef struct {
  int   length;
  BufferElt   elt[MemoryBufferSize];
} queue_memory; 

typedef struct {
time_t AccessDuration; //effective time for one access to the shared cache
queue_memory queue;        // queue to store core Identifeirs 
} shared_memory;


shared_memory L2= {1,{0,{{0,{0,0,0}},{0,{0,0,0}},{0,{0,0,0}},{0,{0,0,0}},{0,{0,0,0}},{0,{0,0,0}},{0,{0,0,0}},{0,{0,0,0}}}}};
shared_memory DRAM= {2,{0,{{0,{0,0,0}},{0,{0,0,0}},{0,{0,0,0}},{0,{0,0,0}},{0,{0,0,0}},{0,{0,0,0}},{0,{0,0,0}},{0,{0,0,0}}}}};

typedef struct { 
  pri_t		pri;            
  time_t	offset;
  time_t	period;
  time_t    wcet;
  time_t	deadline;  
  bool      preemptive;
  Requests  requests;               // the sequenec of access requests of a task
  int numberAccesses;                 // effective number of instructions
  int rounds;  
  cId_t   coreId;                   // the core id to which the task is assigned
} task_t;

const task_t task[tId_n]={
{3,0,400,120,400,false,{{0,cache,Read},{0,dram,Write},{0,dram,Read},{0,dram,Write},{0,cache,Read},{0,dram,Read},{0,cache,Read},{0,dram,Read},{0,dram,Read},{0,dram,Read},{0,dram,Read},{0,dram,Read},{0,dram,Read}},4,1,0},
{3,0,1200,130,1200,false,{{0,dram,Write},{0,cache,Read},{0,dram,Write},{0,dram,Read},{0,cache,Write},{0,dram,Read},{0,cache,Write},{0,dram,Read},{0,dram,Write},{0,dram,Write},{0,cache,Read},{0,dram,Write},{0,dram,Write}},13,1,0},
{3,0,1800,500,1800,false,{{0,dram,Read},{0,cache,Write},{0,dram,Read},{0,dram,Write},{0,cache,Write},{0,dram,Write},{0,cache,Read},{0,dram,Write},{0,dram,Read},{0,dram,Write},{0,dram,Read},{0,dram,Write},{0,dram,Write}},11,4,1},  //35
{3,0,6000,440,6000,false,{{0,dram,Read},{0,cache,Write},{0,dram,Read},{0,dram,Write},{0,cache,Read},{0,dram,Write},{0,cache,Read},{0,dram,Write},{0,dram,Read},{0,dram,Write},{0,dram,Read},{0,dram,Write},{0,dram,Read}},12,9,1}
};

clock clk;
int discreteClk=1;
clock curTime[tId_n];   // clocks to track the current local time of each task
clock L2_ReqDelay[cId_n]; // to measure the delay for each access to L2 made by a given core
clock DRAM_ReqDelay[cId_n]; // to measure the delay for each access to dram made by a given core
clock utiliz[cId_n];  // to measure the utilization of each core
int inUse[cId_n];  // status of each core

bool error=false;  // global var to store if a task misses a deadline
          
clock execTime[tId_t]; //used to measure whether the wcet is over

broadcast chan releaseDRAM;
broadcast chan DRAMReqR[cId_n];  // used by dram scheduler to connect cores with dram once a core is scheduled
broadcast chan DRAMReqW; // to trigger dram for already queued write requests, so that no core is going to be unlocked by the end of access
broadcast chan releaseL2; // used to notify the L2 scheduler when the cache is done with the current access
broadcast chan L2AccessW;  // channel used to for write requests from L2 scheduler to cache, as we need to not unlock any core once access done because write is not blocking
broadcast chan L2AccessR[cId_n];// used to trigger the effective access of a core to the L2 for read requests
broadcast chan reqCore[cId_n][tId_n];  // channels to synchronize each requesting task with the scheduler of its core
broadcast chan taskSched[cId_n][tId_n]; // channels to activate each task by its corresponding scheduler
broadcast  chan releaseCore[cId_n]; // channels to release a core once the scheduled task is done
 broadcast chan preempt[tId_n]; // channels to preempt tasks by the schedulers 
broadcast chan accessExec[cId_n]; // channels to load the current instr for each core
broadcast  chan accessDone[cId_n]; // channels to notify the execution termination of the current instructions
broadcast chan dramReq[cId_n]; // channels to request DRAM by cores
broadcast  chan dramAccessDone[cId_n]; // channels to notify the access termination of the current request of each core
broadcast  chan cacheReq[cId_n]; // channels to request the cache access
broadcast  chan cacheAccessDone[cId_n]; // channels to notify the termination of cache access
broadcast  chan DRAMAccess[cId_n]; // channels to request DRAM access by cores
broadcast  chan DRAMAccessDone[cId_n]; // channels to notify cores by the termination of DRAM access
 //chan Connect[cId_n];  // channels to connect a core to the DRAM through the Connector
//chan ConnectDone[cId_n];  // channels to send back the data/notification from DRAM to the connector

void enqueue(cId_t c, tId_t t)
{
core[c].queue.elt[core[c].queue.length]=t;
core[c].queue.length++;
}

int get_WCRA_m(tId_t t)
{ int i,j=0;
  for(i=0;i&lt;task[t].numberAccesses;i++)
  { 
    if (task[t].requests[i].memoryAccess==dram)
       j++; 
  }
  return j;
}

int get_WCRA_L2(tId_t t)
{ int i,j=0;
  for(i=0;i&lt;task[t].numberAccesses;i++)
  { 
    if (task[t].requests[i].memoryAccess==cache)
       j++; 
  }
  return j;
}

void MCentric_Sched(cId_t c)
{ int i,j,s;
 for(i=0;i&lt;core[c].queue.length;i++)
 { 
    j=i;
    do
    { if( 
     (get_WCRA_m(core[c].queue.elt[i])&gt;get_WCRA_m(core[c].queue.elt[j]))
     ||
    (
      (get_WCRA_m(core[c].queue.elt[i])== get_WCRA_m(core[c].queue.elt[j]))
      &amp;&amp;
     (get_WCRA_L2(core[c].queue.elt[i])&gt;= get_WCRA_L2(core[c].queue.elt[j]))
    )
    )
          j++; 
      else
      {  s=core[c].queue.elt[i];
         core[c].queue.elt[i]=core[c].queue.elt[j];
         core[c].queue.elt[j]=s;
         j= core[c].queue.length;        
      }      
    }
    while(j&lt;core[c].queue.length);
 }
}


void EDF_Sched(cId_t c)
{ int i,j,s;
 for(i=0;i&lt;core[c].queue.length;i++)
 { 
    j=i;
    do
    { if(task[core[c].queue.elt[i]].deadline&lt;task[core[c].queue.elt[j]].deadline)
          j++;
      else
      {  s=core[c].queue.elt[i];
         core[c].queue.elt[i]=core[c].queue.elt[j];
         core[c].queue.elt[j]=s;
         j= core[c].queue.length;        
      }      
    }
    while(j&lt;core[c].queue.length);
 }
}

void FPS_Sched(cId_t c)
{}

void sortQueue(cId_t c)    // p is the scheduling policy : 0 for FIFO, 1 for FPS, 2 for RM , 3 for EDF
{
if (core[c].scheduler ==EDF) { EDF_Sched(c);}

if (core[c].scheduler ==FPS)  { FPS_Sched(c);}

if (core[c].scheduler ==MCentric)  { MCentric_Sched(c);}

}

void dequeueFirstElt(cId_t c)
{ int i;
if (core[c].queue.length==1) {core[c].queue.length--;}
else
{
  for(i=0; i&lt;core[c].queue.length-1; i++)
    {
     core[c].queue.elt[i]=core[c].queue.elt[i+1];   // move each element one step back
    }
  core[c].queue.length--;
}
}

void L2enqueue(BufferElt c)
{
L2.queue.elt[L2.queue.length]=c;
L2.queue.length++;
}

void DRAMenqueue(BufferElt c)
{
DRAM.queue.elt[DRAM.queue.length]=c;
DRAM.queue.length++;
}

void dequeueL2FirstElt()
{ int i;
if (L2.queue.length==1) {L2.queue.length--;}
else
{
  for(i=0; i&lt;L2.queue.length-1; i++)
    {
     L2.queue.elt[i]=L2.queue.elt[i+1];   // move each element one step back
    }
  L2.queue.length--;
}
}

void dequeueDRAMFirstElt()
{ int i;
if (DRAM.queue.length==1) {DRAM.queue.length--;}
else
{
  for(i=0; i&lt;DRAM.queue.length-1; i++)
    {
     DRAM.queue.elt[i]=DRAM.queue.elt[i+1];   // move each element one step back
    }
  DRAM.queue.length--;
}
}

void Sort_DRAMQueue(int b)
{}
</declaration>
	<template>
		<name>Scheduler</name>
		<parameter>const cId_t cId</parameter>
		<location id="id0" x="-824" y="-416">
			<name x="-816" y="-442">Allocate2</name>
			<committed/>
		</location>
		<location id="id1" x="-824" y="-493">
			<name x="-850" y="-527">Release</name>
			<committed/>
		</location>
		<location id="id2" x="-416" y="-493">
			<name x="-450" y="-527">Allocate1</name>
			<committed/>
		</location>
		<location id="id3" x="-629" y="-493">
			<name x="-620" y="-518">Init</name>
		</location>
		<init ref="id3"/>
		<transition>
			<source ref="id0"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-807" y="-416">taskSched[cId][core[cId].queue.elt[0]]!</label>
			<nail x="-629" y="-416"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-824" y="-476">core[cId].queue.length&gt;0</label>
			<label kind="assignment" x="-824" y="-459">sortQueue(cId)</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="guard" x="-807" y="-518">core[cId].queue.length==0</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-790" y="-586">releaseCore[cId]?</label>
			<label kind="assignment" x="-790" y="-569">dequeueFirstElt(cId),
inUse[cId]=0</label>
			<nail x="-654" y="-552"/>
			<nail x="-807" y="-552"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="-603" y="-603">core[cId].queue.length==1</label>
			<label kind="synchronisation" x="-637" y="-586">taskSched[cId][core[cId].queue.elt[0]]!</label>
			<nail x="-416" y="-561"/>
			<nail x="-629" y="-561"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="select" x="-561" y="-535">i:tId_t</label>
			<label kind="synchronisation" x="-569" y="-518">reqCore[cId][i]?</label>
			<label kind="assignment" x="-569" y="-493">enqueue(cId,i)</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="-595" y="-459">core[cId].queue.length&gt;1</label>
			<nail x="-442" y="-433"/>
			<nail x="-595" y="-433"/>
		</transition>
	</template>
	<template>
		<name>SharedCache</name>
		<declaration>clock x;
cId_t e;</declaration>
		<location id="id4" x="-391" y="-187">
			<name x="-408" y="-212">Write</name>
			<label kind="invariant" x="-425" y="-178">x&lt;=L2.AccessDuration</label>
		</location>
		<location id="id5" x="-263" y="-272">
			<committed/>
		</location>
		<location id="id6" x="-42" y="-187">
			<name x="-42" y="-212">Read</name>
			<label kind="invariant" x="-144" y="-178">x&lt;=L2.AccessDuration</label>
		</location>
		<location id="id7" x="-263" y="-187">
		</location>
		<init ref="id7"/>
		<transition>
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="guard" x="-425" y="-297">x&gt;=L2.AccessDuration</label>
			<nail x="-391" y="-272"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-365" y="-212">L2AccessW?</label>
			<label kind="assignment" x="-340" y="-204">x=0</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-263" y="-246">releaseL2!</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="guard" x="-221" y="-289">x&gt;=L2.AccessDuration</label>
			<label kind="synchronisation" x="-212" y="-272">cacheAccessDone[e]!</label>
			<nail x="-42" y="-272"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="select" x="-195" y="-221">i: cId_t</label>
			<label kind="synchronisation" x="-204" y="-204">L2AccessR[i]?</label>
			<label kind="assignment" x="-204" y="-187">x=0, e=i</label>
		</transition>
	</template>
	<template>
		<name>L2Scheduler</name>
		<declaration>cId_t l;
BufferElt  newReq;</declaration>
		<location id="id8" x="-654" y="-578">
			<committed/>
		</location>
		<location id="id9" x="-875" y="-459">
			<name x="-900" y="-484">Release</name>
			<committed/>
		</location>
		<location id="id10" x="-408" y="-459">
			<name x="-433" y="-484">Allocate</name>
			<committed/>
		</location>
		<location id="id11" x="-654" y="-459">
			<name x="-645" y="-484">Init</name>
		</location>
		<init ref="id11"/>
		<transition>
			<source ref="id8"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-654" y="-561">L2AccessW!</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id8"/>
			<label kind="guard" x="-612" y="-612">L2.queue.length==1 &amp;&amp; 
coreAccess[l].rwAction==Write</label>
			<label kind="synchronisation" x="-603" y="-578">cacheAccessDone[l]!</label>
			<nail x="-416" y="-578"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id11"/>
			<label kind="guard" x="-884" y="-357">L2.queue.length&gt;0 &amp;&amp;
L2.queue.elt[0].req.rwAction==Write</label>
			<label kind="synchronisation" x="-824" y="-374">L2AccessW!</label>
			<nail x="-875" y="-340"/>
			<nail x="-671" y="-340"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="guard" x="-612" y="-340">L2.queue.length&gt;1 &amp;&amp;
coreAccess[l].rwAction==Write</label>
			<label kind="synchronisation" x="-603" y="-357">cacheAccessDone[l]!</label>
			<nail x="-408" y="-340"/>
			<nail x="-637" y="-340"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id11"/>
			<label kind="guard" x="-867" y="-442">L2.queue.length&gt;0 &amp;&amp;
L2.queue.elt[0].req.rwAction==Read</label>
			<label kind="synchronisation" x="-875" y="-408">L2AccessR[L2.queue.elt[0].core]!</label>
			<nail x="-858" y="-408"/>
			<nail x="-671" y="-408"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id11"/>
			<label kind="guard" x="-816" y="-484">L2.queue.length==0</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-799" y="-552">releaseL2?</label>
			<label kind="assignment" x="-816" y="-535">dequeueL2FirstElt()</label>
			<nail x="-671" y="-518"/>
			<nail x="-875" y="-518"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="guard" x="-612" y="-535">L2.queue.length==1 &amp;&amp; 
coreAccess[l].rwAction==Read</label>
			<label kind="synchronisation" x="-637" y="-501">L2AccessR[L2.queue.elt[0].core]!</label>
			<nail x="-425" y="-510"/>
			<nail x="-637" y="-510"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id10"/>
			<label kind="select" x="-612" y="-476">i:cId_t</label>
			<label kind="synchronisation" x="-552" y="-476">cacheReq[i]?</label>
			<label kind="assignment" x="-603" y="-459">l=i,newReq.core=i,
newReq.req=coreAccess[i],
L2enqueue(newReq)</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="guard" x="-620" y="-399">L2.queue.length&gt;1 &amp;&amp; 
coreAccess[l].rwAction==Read</label>
			<nail x="-442" y="-382"/>
			<nail x="-620" y="-382"/>
		</transition>
	</template>
	<template>
		<name>DiscreteTime</name>
		<location id="id12" x="-425" y="-195">
			<label kind="invariant" x="-476" y="-229">clk&lt;=discreteClk</label>
		</location>
		<init ref="id12"/>
		<transition>
			<source ref="id12"/>
			<target ref="id12"/>
			<label kind="guard" x="-476" y="-153">clk&gt;=discreteClk</label>
			<label kind="assignment" x="-467" y="-136">discreteClk++</label>
			<nail x="-391" y="-153"/>
			<nail x="-467" y="-153"/>
		</transition>
	</template>
	<template>
		<name>DRAMMemory</name>
		<declaration>clock x;
int currentCore=-1;</declaration>
		<location id="id13" x="-374" y="-144">
			<name x="-391" y="-170">Write</name>
			<label kind="invariant" x="-408" y="-136">x&lt;=DRAMAccessTime</label>
		</location>
		<location id="id14" x="-229" y="-76">
			<name x="-246" y="-68">Done</name>
			<committed/>
		</location>
		<location id="id15" x="8" y="-144">
			<name x="-17" y="-178">Read</name>
			<label kind="invariant" x="-110" y="-136">x&lt;=DRAMAccessTime</label>
		</location>
		<location id="id16" x="-229" y="-144">
			<name x="-238" y="-170">Idle</name>
		</location>
		<init ref="id16"/>
		<transition>
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="guard" x="-382" y="-102">x&gt;=DRAMAccessTime</label>
			<nail x="-374" y="-76"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-356" y="-161">DRAMReqW?</label>
			<label kind="assignment" x="-306" y="-178">x=0</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="-221" y="-127">releaseDRAM!</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id14"/>
			<label kind="guard" x="-153" y="-102">x&gt;=DRAMAccessTime</label>
			<label kind="synchronisation" x="-187" y="-76">dramAccessDone[currentCore]!</label>
			<nail x="8" y="-76"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="select" x="-136" y="-195">i:cId_t</label>
			<label kind="synchronisation" x="-170" y="-178">DRAMReqR[i]?</label>
			<label kind="assignment" x="-178" y="-161">x=0, currentCore=i</label>
		</transition>
	</template>
	<template>
		<name>DRAMScheduler</name>
		<declaration>int FR_FCFS;
BufferElt  newReq;
cId_t l;</declaration>
		<location id="id17" x="-612" y="-578">
			<name x="-680" y="-603">Unlocked</name>
			<committed/>
		</location>
		<location id="id18" x="-943" y="-391">
			<name x="-943" y="-391">Allocate2</name>
			<committed/>
		</location>
		<location id="id19" x="-943" y="-493">
			<name x="-951" y="-518">Release</name>
			<committed/>
		</location>
		<location id="id20" x="-382" y="-459">
			<name x="-416" y="-484">Allocate1</name>
			<committed/>
		</location>
		<location id="id21" x="-654" y="-459">
			<name x="-645" y="-484">Init</name>
		</location>
		<init ref="id21"/>
		<transition>
			<source ref="id17"/>
			<target ref="id21"/>
			<label kind="synchronisation" x="-748" y="-578">DRAMReqW!</label>
			<nail x="-654" y="-578"/>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id21"/>
			<label kind="guard" x="-620" y="-357">DRAM.queue.length&gt;1&amp;&amp; 
coreAccess[l].rwAction==Write</label>
			<label kind="synchronisation" x="-595" y="-323">dramAccessDone[l]!</label>
			<nail x="-382" y="-331"/>
			<nail x="-654" y="-331"/>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id17"/>
			<label kind="guard" x="-595" y="-620">DRAM.queue.length==1&amp;&amp; 
coreAccess[l].rwAction==Write</label>
			<label kind="synchronisation" x="-561" y="-578">dramAccessDone[l]!</label>
			<nail x="-382" y="-578"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id21"/>
			<label kind="guard" x="-935" y="-357">DRAM.queue.elt[0].req.rwAction==Write</label>
			<label kind="synchronisation" x="-858" y="-374">DRAMReqW!</label>
			<nail x="-943" y="-340"/>
			<nail x="-671" y="-340"/>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id18"/>
			<label kind="guard" x="-943" y="-476">DRAM.queue.length&gt;0</label>
			<label kind="assignment" x="-943" y="-459">Sort_DRAMQueue(FR_FCFS)</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id21"/>
			<label kind="guard" x="-935" y="-425">DRAM.queue.elt[0].req.rwAction==Read</label>
			<label kind="synchronisation" x="-926" y="-408">DRAMReqR[DRAM.queue.elt[0].core]!</label>
			<nail x="-671" y="-391"/>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id21"/>
			<label kind="guard" x="-875" y="-552">DRAM.queue.length==0</label>
			<nail x="-943" y="-535"/>
			<nail x="-680" y="-535"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="-841" y="-527">releaseDRAM?</label>
			<label kind="assignment" x="-867" y="-510">dequeueDRAMFirstElt()</label>
			<nail x="-680" y="-493"/>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id21"/>
			<label kind="guard" x="-620" y="-552">DRAM.queue.length&gt;1&amp;&amp; 
coreAccess[l].rwAction==Read</label>
			<nail x="-416" y="-535"/>
			<nail x="-629" y="-535"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id20"/>
			<label kind="select" x="-603" y="-501">i:cId_t</label>
			<label kind="synchronisation" x="-544" y="-501">dramReq[i]?</label>
			<label kind="assignment" x="-603" y="-484">newReq.core=i,
newReq.req=coreAccess[i],
DRAMenqueue(newReq), l=i</label>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id21"/>
			<label kind="guard" x="-620" y="-416">DRAM.queue.length==1 &amp;&amp;
coreAccess[l].rwAction==Read</label>
			<label kind="synchronisation" x="-654" y="-382">DRAMReqR[DRAM.queue.elt[0].core]!</label>
			<nail x="-399" y="-399"/>
			<nail x="-629" y="-399"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Task</name>
		<parameter>const tId_t tId</parameter>
		<declaration>// Place local declarations here.

int curAccess=0, iterate=1;
cId_t c;</declaration>
		<location id="id22" x="-578" y="-127">
			<name x="-595" y="-152">AccessRequest</name>
			<label kind="invariant" x="-603" y="-119">execTime[tId]'==0</label>
		</location>
		<location id="id23" x="-535" y="-314">
			<name x="-569" y="-348">DeadlineMiss</name>
		</location>
		<location id="id24" x="-272" y="-221">
			<name x="-264" y="-247">Run</name>
			<label kind="invariant" x="-289" y="-212">execTime[tId]&lt;=task[tId].wcet</label>
			<label kind="exponentialrate" x="-298" y="-247">1:8</label>
		</location>
		<location id="id25" x="-578" y="-467">
			<name x="-569" y="-484">ExecDone</name>
			<label kind="invariant" x="-569" y="-467">curTime[tId]&lt;=task[tId].period</label>
		</location>
		<location id="id26" x="-272" y="-365">
			<name x="-264" y="-365">WaitSched</name>
			<label kind="invariant" x="-263" y="-408">curTime[tId]&lt;=
task[tId].deadline</label>
		</location>
		<location id="id27" x="-136" y="-561">
			<name x="-153" y="-595">Ready</name>
			<committed/>
		</location>
		<location id="id28" x="-578" y="-561">
			<name x="-595" y="-586">Init</name>
			<label kind="invariant" x="-569" y="-561">curTime[tId] &lt;=task[tId].offset</label>
		</location>
		<init ref="id28"/>
		<transition>
			<source ref="id24"/>
			<target ref="id24"/>
			<label kind="guard" x="-59" y="-289">curAccess==task[tId].numberAccesses 
&amp;&amp; iterate &lt; task[tId].rounds</label>
			<label kind="assignment" x="-59" y="-246">curAccess=0, iterate++</label>
			<nail x="-76" y="-297"/>
			<nail x="-76" y="-221"/>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id24"/>
			<label kind="synchronisation" x="-569" y="-187">accessDone[c]?</label>
			<label kind="assignment" x="-459" y="-187">curAccess++</label>
			<nail x="-578" y="-187"/>
			<nail x="-340" y="-187"/>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id22"/>
			<label kind="guard" x="-382" y="-161">curAccess&lt;task[tId].numberAccesses</label>
			<label kind="synchronisation" x="-246" y="-178">accessExec[c]!</label>
			<label kind="assignment" x="-425" y="-144">coreAccess[c]=task[tId].requests[curAccess]</label>
			<nail x="-246" y="-187"/>
			<nail x="-127" y="-187"/>
			<nail x="-127" y="-127"/>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id25"/>
			<label kind="guard" x="-578" y="-433">curAccess&gt;=task[tId].numberAccesses 
&amp;&amp; execTime[tId]&gt;=task[tId].wcet 
&amp;&amp; curTime[tId]&lt;=task[tId].deadline &amp;&amp;
iterate==task[tId].rounds</label>
			<label kind="synchronisation" x="-578" y="-365">releaseCore[task[tId].coreId]!</label>
			<label kind="assignment" x="-569" y="-450">iterate=1</label>
			<nail x="-340" y="-204"/>
			<nail x="-578" y="-204"/>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id23"/>
			<label kind="guard" x="-535" y="-297">curTime[tId]&gt;=task[tId].deadline &amp;&amp;
(curAccess&lt;task[tId].numberAccesses 
 || execTime[tId]&lt;task[tId].wcet)</label>
			<label kind="synchronisation" x="-527" y="-238">releaseCore[c]!</label>
			<label kind="assignment" x="-425" y="-238">error=true</label>
			<nail x="-340" y="-221"/>
			<nail x="-535" y="-221"/>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id23"/>
			<label kind="guard" x="-493" y="-331">curTime[tId]&gt;=task[tId].deadline</label>
			<label kind="assignment" x="-365" y="-348">error=true</label>
			<nail x="-280" y="-314"/>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id24"/>
			<label kind="synchronisation" x="-263" y="-289">taskSched[c][tId]?</label>
			<label kind="assignment" x="-263" y="-323">execTime[tId]=0,
inUse[c]=1</label>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id28"/>
			<label kind="guard" x="-578" y="-535">curTime[tId]&gt;=task[tId].period</label>
			<label kind="assignment" x="-578" y="-518">curTime[tId]=0, curAccess=0</label>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id26"/>
			<label kind="synchronisation" x="-246" y="-501">reqCore[c][tId]!</label>
			<nail x="-136" y="-467"/>
			<nail x="-272" y="-467"/>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id27"/>
			<label kind="guard" x="-348" y="-586">curTime[tId]&gt;=task[tId].offset</label>
			<label kind="assignment" x="-297" y="-561">c=task[tId].coreId</label>
		</transition>
	</template>
	<template>
		<name>Core</name>
		<parameter>const cId_t cId</parameter>
		<declaration>clock x;</declaration>
		<location id="id29" x="-365" y="-255">
			<name x="-399" y="-246">Interm1</name>
			<committed/>
		</location>
		<location id="id30" x="-501" y="-493">
			<name x="-518" y="-485">Interm2</name>
			<urgent/>
		</location>
		<location id="id31" x="-229" y="-493">
			<name x="-263" y="-519">DRAMWait</name>
			<label kind="invariant" x="-340" y="-484">L2_ReqDelay[cId]'==0 &amp;&amp;
DRAM_ReqDelay[cId]'==1</label>
		</location>
		<location id="id32" x="0" y="-493">
			<name x="-59" y="-518">DRAMRequest</name>
			<committed/>
		</location>
		<location id="id33" x="-501" y="-365">
			<name x="-527" y="-399">Available</name>
			<label kind="invariant" x="-527" y="-348">utiliz[cId]'==inUse[cId] &amp;&amp;
L2_ReqDelay[cId]'==0 &amp;&amp; 
DRAM_ReqDelay[cId]'==0</label>
		</location>
		<location id="id34" x="0" y="-365">
			<name x="-17" y="-391">Determine</name>
			<label kind="invariant" x="-119" y="-348">L2_ReqDelay[cId]'==1 &amp;&amp;
DRAM_ReqDelay[cId]'==0</label>
		</location>
		<location id="id35" x="-280" y="-365">
			<name x="-323" y="-391">CacheRequest</name>
			<label kind="invariant" x="-357" y="-365">x&lt;=core[cId].LocalCacheTime 
&amp;&amp; L2_ReqDelay[cId]'==0 &amp;&amp;
DRAM_ReqDelay[cId]'==0</label>
		</location>
		<init ref="id33"/>
		<transition>
			<source ref="id29"/>
			<target ref="id33"/>
			<label kind="synchronisation" x="-365" y="-297">accessDone[cId]!</label>
			<nail x="-365" y="-348"/>
			<nail x="-459" y="-348"/>
		</transition>
		<transition>
			<source ref="id30"/>
			<target ref="id33"/>
			<label kind="synchronisation" x="-501" y="-459">accessDone[cId]!</label>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id30"/>
			<label kind="synchronisation" x="-442" y="-510">dramAccessDone[cId]?</label>
		</transition>
		<transition>
			<source ref="id32"/>
			<target ref="id31"/>
			<label kind="synchronisation" x="-161" y="-519">dramReq[cId]!</label>
		</transition>
		<transition>
			<source ref="id34"/>
			<target ref="id32"/>
			<label kind="guard" x="-238" y="-442">coreAccess[cId].memoryAccess==dram</label>
			<label kind="synchronisation" x="-144" y="-459">cacheAccessDone[cId]?</label>
		</transition>
		<transition>
			<source ref="id34"/>
			<target ref="id29"/>
			<label kind="guard" x="-357" y="-255">coreAccess[cId].memoryAccess==cache</label>
			<label kind="synchronisation" x="-272" y="-272">cacheAccessDone[cId]?</label>
			<nail x="-8" y="-365"/>
			<nail x="-25" y="-348"/>
			<nail x="-127" y="-348"/>
			<nail x="-127" y="-255"/>
		</transition>
		<transition>
			<source ref="id35"/>
			<target ref="id34"/>
			<label kind="guard" x="-221" y="-399">x&gt;=core[cId].LocalCacheTime</label>
			<label kind="synchronisation" x="-170" y="-382">cacheReq[cId]!</label>
			<label kind="assignment" x="-255" y="-416">coreAccess[cId].issueTime=discreteClk</label>
		</transition>
		<transition>
			<source ref="id33"/>
			<target ref="id35"/>
			<label kind="synchronisation" x="-442" y="-391">accessExec[cId]?</label>
			<label kind="assignment" x="-467" y="-425">x=0,L2_ReqDelay[cId]=0,
DRAM_ReqDelay[cId]=0</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
Task0 = Task(0); Task1 = Task(1); Task2 = Task(2); Task3 = Task(3);

Core1 = Core(0); Sched1 = Scheduler(0);
Core2 = Core(1); Sched2 = Scheduler(1);
Cache =SharedCache();
L2Sched =L2Scheduler(); 
Dram = DRAMMemory();
DRAMSched =DRAMScheduler();
//Core3 = Core(2); Cache3 = Cache(2); Sched3 = Scheduler(2);
//Core4 = Core(3); Cache4 = Cache(3); Sched4 = Scheduler(3);


//MainMem = DRAM_Memory();
discreteT = DiscreteTime();


// List one or more processes to be composed into a system.
system //Task,Core, Cache, Scheduler, 

Task0, Task1, Task2, Task3,//Task8, Task9, //Task10, Task11,
Core1, Core2, 
Cache, L2Sched,
Sched1, Sched2,
Dram, DRAMSched
//discreteT 
; 
    </system>
	<queries>
		<query>
			<formula>A[] not deadlock
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Pr[&lt;= 1000000](&lt;&gt; error==1)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E[clk&lt;=10000;100](max:L2_ReqDelay[1])
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E[clk&lt;=10000;100](max:L2_ReqDelay[0])
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E[clk&lt;=10000;100](max:DRAM_ReqDelay[1])
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E[clk&lt;=10000;100](max:DRAM_ReqDelay[0])
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>simulate 1000  [&lt;=100000] {utiliz[0],utiliz[1]}
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[] !error
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E[clk&lt;=10000;100](max:utiliz[0])
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E[clk&lt;=10000;100](max:utiliz[1])
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; error
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
